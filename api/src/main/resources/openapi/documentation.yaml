openapi: "3.1.0"
info:
  title: "Speed Match API"
  description: "スピードマッチ - オンライン対戦型カードゲームAPI"
  version: "0.0.1"
servers:
  - url: "http://127.0.0.1:8080"
    description: "Development server"

components:
  schemas:
    # 共通レスポンススキーマ
    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          description: "レスポンスデータ"
        message:
          type: string
          description: "成功メッセージ"

    ApiErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          $ref: "#/components/schemas/ErrorDetails"

    ErrorDetails:
      type: object
      properties:
        code:
          type: string
          description: "エラーコード"
          example: "VALIDATION_ERROR"
        message:
          type: string
          description: "エラーメッセージ"
          example: "バリデーションエラーが発生しました"
        details:
          type: object
          description: "追加のエラー詳細"

    # プレイヤー関連スキーマ
    PlayerCreateRequest:
      type: object
      required:
        - username
        - avatar
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 12
          pattern: "^[a-zA-Z0-9_]+$"
          description: "ユーザー名（3-12文字、英数字とアンダースコアのみ）"
          example: "player123"
        avatar:
          type: string
          minLength: 1
          maxLength: 1
          description: "アバター（絵文字または英字1文字）"
          example: "👤"

    PlayerUpdateRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 12
          pattern: "^[a-zA-Z0-9_]+$"
          description: "ユーザー名（3-12文字、英数字とアンダースコアのみ）"
          example: "newname"
        avatar:
          type: string
          minLength: 1
          maxLength: 1
          description: "アバター（絵文字または英字1文字）"
          example: "🎮"

    PlayerResponse:
      type: object
      properties:
        playerId:
          type: string
          description: "プレイヤーID"
          example: "pl_1234567890"
        username:
          type: string
          description: "ユーザー名"
          example: "player123"
        avatar:
          type: string
          description: "アバター"
          example: "👤"
        stats:
          $ref: "#/components/schemas/PlayerStats"
        createdAt:
          type: string
          format: date-time
          description: "作成日時"
          example: "2025-10-11T10:00:00Z"

    PlayerStats:
      type: object
      properties:
        totalGames:
          type: integer
          description: "総プレイ回数"
          example: 50
        wins:
          type: integer
          description: "勝利数"
          example: 25
        losses:
          type: integer
          description: "敗北数"
          example: 25
        winRate:
          type: number
          format: float
          description: "勝率"
          example: 0.5
        fastestWin:
          type: integer
          nullable: true
          description: "最速勝利ターン数"
          example: 8
        totalCardsPlayed:
          type: integer
          description: "総カードプレイ数"
          example: 400

    PlayerStatsResponse:
      type: object
      properties:
        playerId:
          type: string
          description: "プレイヤーID"
          example: "pl_1234567890"
        stats:
          $ref: "#/components/schemas/PlayerStats"

paths:
  /:
    get:
      summary: "Hello World"
      description: "シンプルなHello Worldエンドポイント"
      responses:
        "200":
          description: "成功レスポンス"
          content:
            text/plain:
              schema:
                type: "string"
                example: "Hello World!"

  /health:
    get:
      summary: "Health Check"
      description: "サーバーの稼働状態を確認するヘルスチェックエンドポイント"
      responses:
        "200":
          description: "サーバーが正常に稼働中"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: "string"
                    example: "OK"
                  timestamp:
                    type: "string"
                    format: "date-time"
                    example: "2025-10-16T14:59:55.459Z"

  /api/v1/hello:
    get:
      summary: "API v1 Hello"
      description: "API v1のHelloエンドポイント"
      responses:
        "200":
          description: "成功レスポンス"
          content:
            text/plain:
              schema:
                type: "string"
                example: "Hello from API v1!"

  # プレイヤー管理API
  /api/players:
    post:
      summary: "プレイヤー登録"
      description: "新規プレイヤーを登録します"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlayerCreateRequest"
      responses:
        "201":
          description: "プレイヤーが正常に作成されました"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/PlayerResponse"
        "400":
          description: "バリデーションエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
        "409":
          description: "ユーザー名が既に存在します"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"

  /api/players/{playerId}:
    parameters:
      - name: playerId
        in: path
        required: true
        schema:
          type: string
        description: "プレイヤーID"
        example: "pl_1234567890"

    get:
      summary: "プレイヤー情報取得"
      description: "指定されたプレイヤーの情報を取得します"
      responses:
        "200":
          description: "プレイヤー情報"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/PlayerResponse"
        "404":
          description: "プレイヤーが見つかりません"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"

    put:
      summary: "プレイヤー情報更新"
      description: "指定されたプレイヤーの情報を更新します"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlayerUpdateRequest"
      responses:
        "200":
          description: "プレイヤー情報が正常に更新されました"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/PlayerResponse"
        "400":
          description: "バリデーションエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
        "404":
          description: "プレイヤーが見つかりません"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
        "409":
          description: "ユーザー名が既に存在します"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"

  /api/players/{playerId}/stats:
    parameters:
      - name: playerId
        in: path
        required: true
        schema:
          type: string
        description: "プレイヤーID"
        example: "pl_1234567890"

    get:
      summary: "プレイヤー統計取得"
      description: "指定されたプレイヤーの詳細統計を取得します"
      responses:
        "200":
          description: "プレイヤー統計情報"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/PlayerStatsResponse"
        "404":
          description: "プレイヤーが見つかりません"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"