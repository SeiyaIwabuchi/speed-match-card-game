openapi: "3.1.0"
info:
  title: "Speed Match API"
  description: "スピードマッチ - オンライン対戦型カードゲームAPI"
  version: "0.0.1"
servers:
  - url: "http://127.0.0.1:8080"
    description: "Development server"

components:
  schemas:
    # 共通レスポンススキーマ
    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          description: "レスポンスデータ"
        message:
          type: string
          description: "成功メッセージ"

    ApiErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          $ref: "#/components/schemas/ErrorDetails"

    ErrorDetails:
      type: object
      properties:
        code:
          type: string
          description: "エラーコード"
          example: "VALIDATION_ERROR"
        message:
          type: string
          description: "エラーメッセージ"
          example: "バリデーションエラーが発生しました"
        details:
          type: object
          description: "追加のエラー詳細"

    # プレイヤー関連スキーマ
    PlayerCreateRequest:
      type: object
      required:
        - username
        - avatar
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 12
          pattern: "^[a-zA-Z0-9_]+$"
          description: "ユーザー名（3-12文字、英数字とアンダースコアのみ）"
          example: "player123"
        avatar:
          type: string
          minLength: 1
          maxLength: 1
          description: "アバター（絵文字または英字1文字）"
          example: "👤"

    PlayerUpdateRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 12
          pattern: "^[a-zA-Z0-9_]+$"
          description: "ユーザー名（3-12文字、英数字とアンダースコアのみ）"
          example: "newname"
        avatar:
          type: string
          minLength: 1
          maxLength: 1
          description: "アバター（絵文字または英字1文字）"
          example: "🎮"

    PlayerResponse:
      type: object
      properties:
        playerId:
          type: string
          description: "プレイヤーID"
          example: "pl_1234567890"
        username:
          type: string
          description: "ユーザー名"
          example: "player123"
        avatar:
          type: string
          description: "アバター"
          example: "👤"
        stats:
          $ref: "#/components/schemas/PlayerStats"
        createdAt:
          type: string
          format: date-time
          description: "作成日時"
          example: "2025-10-11T10:00:00Z"

    PlayerStats:
      type: object
      properties:
        totalGames:
          type: integer
          description: "総プレイ回数"
          example: 50
        wins:
          type: integer
          description: "勝利数"
          example: 25
        losses:
          type: integer
          description: "敗北数"
          example: 25
        winRate:
          type: number
          format: float
          description: "勝率"
          example: 0.5
        fastestWin:
          type: integer
          nullable: true
          description: "最速勝利ターン数"
          example: 8
        totalCardsPlayed:
          type: integer
          description: "総カードプレイ数"
          example: 400

    PlayerStatsResponse:
      type: object
      properties:
        playerId:
          type: string
          description: "プレイヤーID"
          example: "pl_1234567890"
        stats:
          $ref: "#/components/schemas/PlayerStats"

    # ポーリングAPI関連スキーマ（Phase 11）
    RoomStateResponse:
      type: object
      properties:
        roomId:
          type: string
          description: "ルームID"
          example: "rm_abc123"
        roomCode:
          type: string
          description: "6桁のルームコード"
          example: "ABC123"
        status:
          type: string
          enum: ["waiting", "playing", "finished"]
          description: "ルームの状態"
          example: "waiting"
        players:
          type: array
          items:
            $ref: "#/components/schemas/RoomPlayerInfo"
          description: "ルーム内のプレイヤー一覧"
        updatedAt:
          type: string
          format: date-time
          description: "最終更新時刻"
          example: "2025-10-11T12:01:30Z"

    RoomPlayerInfo:
      type: object
      properties:
        playerId:
          type: string
          description: "プレイヤーID"
          example: "pl_1234567890"
        username:
          type: string
          description: "ユーザー名"
          example: "player123"
        avatar:
          type: string
          description: "アバター"
          example: "👤"
        isReady:
          type: boolean
          description: "準備完了状態"
          example: true
        isHost:
          type: boolean
          description: "ホストかどうか"
          example: true

    # チャット関連スキーマ
    ChatMessageRequest:
      type: object
      required:
        - playerId
        - message
      properties:
        playerId:
          type: string
          description: "送信者のプレイヤーID"
          example: "pl_1234567890"
        message:
          type: string
          minLength: 1
          maxLength: 200
          description: "メッセージ本文（1-200文字）"
          example: "よろしくお願いします！"
        type:
          type: string
          enum: ["text", "emoji", "preset"]
          default: "text"
          description: "メッセージタイプ"
          example: "text"

    ChatMessageResponse:
      type: object
      properties:
        messageId:
          type: string
          description: "メッセージID"
          example: "12345"
        roomId:
          type: string
          description: "ルームID"
          example: "rm_abc123"
        playerId:
          type: string
          description: "送信者のプレイヤーID"
          example: "pl_1234567890"
        username:
          type: string
          description: "送信者のユーザー名"
          example: "player123"
        avatar:
          type: string
          description: "送信者のアバター"
          example: "👤"
        message:
          type: string
          description: "メッセージ本文"
          example: "よろしくお願いします！"
        type:
          type: string
          enum: ["text", "emoji", "preset"]
          description: "メッセージタイプ"
          example: "text"
        createdAt:
          type: string
          format: date-time
          description: "送信日時"
          example: "2025-10-11T12:05:00Z"

    ChatMessagesResponse:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: "#/components/schemas/ChatMessageResponse"
          description: "チャットメッセージ一覧"
        hasMore:
          type: boolean
          description: "さらにメッセージが存在するか"
          example: false

    # Phase 14 ゲームAPI関連スキーマ
    CreateGameRequest:
      type: object
      required:
        - roomId
        - playerIds
      properties:
        roomId:
          type: string
          description: "ルームID"
          example: "rm_abc123"
        playerIds:
          type: array
          items:
            type: string
          minItems: 2
          maxItems: 4
          description: "プレイヤーIDリスト（2-4人）"
          example: ["pl_test_001", "pl_test_002"]

    CreateGameResponse:
      type: object
      properties:
        gameId:
          type: string
          description: "作成されたゲームID"
          example: "game_1234567890"
        roomId:
          type: string
          description: "ルームID"
          example: "rm_abc123"
        status:
          type: string
          description: "ゲームステータス"
          example: "PLAYING"
        message:
          type: string
          description: "成功メッセージ"
          example: "ゲームが作成されました"

    CardDTO:
      type: object
      required:
        - suit
        - rank
      properties:
        suit:
          type: string
          enum: ["SPADES", "HEARTS", "DIAMONDS", "CLUBS"]
          description: "カードのスート"
          example: "SPADES"
        rank:
          type: integer
          minimum: 1
          maximum: 13
          description: "カードのランク（1=A, 11=J, 12=Q, 13=K）"
          example: 5

    PlayerStateDTO:
      type: object
      required:
        - playerId
        - handSize
      properties:
        playerId:
          type: string
          description: "プレイヤーID"
          example: "pl_test_001"
        handSize:
          type: integer
          description: "手札の枚数"
          example: 7
        hand:
          type: array
          items:
            $ref: "#/components/schemas/CardDTO"
          description: "手札（自分のみ表示）"
          nullable: true
        rank:
          type: integer
          description: "ランク（ゲーム終了時）"
          nullable: true
          example: 1

    GameStateResponse:
      type: object
      properties:
        gameId:
          type: string
          description: "ゲームID"
          example: "game_1234567890"
        roomId:
          type: string
          description: "ルームID"
          example: "rm_abc123"
        players:
          type: array
          items:
            $ref: "#/components/schemas/PlayerStateDTO"
          description: "ゲーム内のプレイヤー一覧"
        fieldCards:
          type: object
          properties:
            first:
              $ref: "#/components/schemas/CardDTO"
            second:
              $ref: "#/components/schemas/CardDTO"
          description: "場札（2枚）"
        currentPlayerId:
          type: string
          description: "現在のターンのプレイヤーID"
          example: "pl_test_001"
        currentPlayerIndex:
          type: integer
          description: "現在のターンのプレイヤーインデックス"
          example: 0
        deckRemaining:
          type: integer
          description: "山札の残り枚数"
          example: 36
        status:
          type: string
          enum: ["PLAYING", "FINISHED", "ABORTED"]
          description: "ゲームステータス"
          example: "PLAYING"
        playableCards:
          type: array
          items:
            $ref: "#/components/schemas/CardDTO"
          description: "プレイ可能なカード（自分のターンの場合のみ）"
          nullable: true
        startedAt:
          type: integer
          format: int64
          description: "ゲーム開始時刻（Unix timestamp）"
          example: 1729769400000
        lastUpdatedAt:
          type: integer
          format: int64
          description: "最終更新時刻（Unix timestamp）"
          example: 1729769450000

    PlayCardRequest:
      type: object
      required:
        - playerId
        - card
        - targetField
      properties:
        playerId:
          type: string
          description: "プレイヤーID"
          example: "pl_test_001"
        card:
          $ref: "#/components/schemas/CardDTO"
        targetField:
          type: integer
          enum: [0, 1]
          description: "どちらの場札に出すか（0 or 1）"
          example: 0

    DrawCardRequest:
      type: object
      required:
        - playerId
      properties:
        playerId:
          type: string
          description: "プレイヤーID"
          example: "pl_test_001"

    SkipTurnRequest:
      type: object
      required:
        - playerId
      properties:
        playerId:
          type: string
          description: "プレイヤーID"
          example: "pl_test_001"

    GameActionResponse:
      type: object
      properties:
        success:
          type: boolean
          description: "アクション成功"
          example: true
        message:
          type: string
          description: "アクションメッセージ"
          example: "カードをプレイしました"
        gameState:
          $ref: "#/components/schemas/GameStateResponse"
          nullable: true

    # 旧GameStateResponse（互換性のため残す）
    OldGameStateResponse:
      type: object
      properties:
        gameId:
          type: string
          description: "ゲームID"
          example: "gm_xyz789"
        roomId:
          type: string
          description: "ルームID"
          example: "rm_abc123"
        status:
          type: string
          enum: ["playing", "finished"]
          description: "ゲームの状態"
          example: "playing"
        players:
          type: array
          items:
            $ref: "#/components/schemas/GamePlayerInfo"
          description: "ゲーム内のプレイヤー一覧"
        fieldCards:
          type: array
          items:
            $ref: "#/components/schemas/CardInfo"
          description: "場に出ているカード"
        updatedAt:
          type: string
          format: date-time
          description: "最終更新時刻"
          example: "2025-10-11T12:16:00Z"

    GamePlayerInfo:
      type: object
      properties:
        playerId:
          type: string
          description: "プレイヤーID"
          example: "pl_1234567890"
        username:
          type: string
          description: "ユーザー名"
          example: "player123"
        avatar:
          type: string
          description: "アバター"
          example: "👤"
        handSize:
          type: integer
          description: "手札の枚数"
          example: 4
        isCurrentTurn:
          type: boolean
          description: "現在のターンかどうか"
          example: false

    CardInfo:
      type: object
      properties:
        cardId:
          type: string
          description: "カードID"
          example: "c_010"
        value:
          type: integer
          description: "カードの値"
          example: 6

    # ルーム関連スキーマ
    RoomCreateRequest:
      type: object
      properties:
        roomName:
          type: string
          maxLength: 50
          description: "ルーム名（オプション）"
          example: "楽しいゲーム部屋"
        maxPlayers:
          type: integer
          minimum: 2
          maximum: 4
          default: 4
          description: "最大プレイヤー数"
          example: 4
        initialHandSize:
          type: integer
          minimum: 5
          maximum: 10
          default: 7
          description: "初期手札枚数"
          example: 7
        turnTimeLimit:
          type: integer
          minimum: 30
          maximum: 300
          default: 60
          description: "ターン時間制限（秒）"
          example: 60
        isPublic:
          type: boolean
          default: true
          description: "公開ルームかどうか"
          example: true

    RoomJoinRequest:
      type: object
      required:
        - playerId
      properties:
        playerId:
          type: string
          description: "参加するプレイヤーのID"
          example: "pl_1234567890"

    RoomLeaveRequest:
      type: object
      required:
        - playerId
      properties:
        playerId:
          type: string
          description: "退出するプレイヤーのID"
          example: "pl_1234567890"

    RoomReadyRequest:
      type: object
      required:
        - playerId
        - isReady
      properties:
        playerId:
          type: string
          description: "プレイヤーのID"
          example: "pl_1234567890"
        isReady:
          type: boolean
          description: "準備完了状態"
          example: true

    RoomStartRequest:
      type: object
      required:
        - hostId
      properties:
        hostId:
          type: string
          description: "ホストのプレイヤーID"
          example: "pl_1234567890"

    RoomResponse:
      type: object
      properties:
        roomId:
          type: string
          description: "ルームID"
          example: "rm_abc123"
        roomCode:
          type: string
          description: "6桁のルームコード"
          example: "ABC123"
        roomName:
          type: string
          nullable: true
          description: "ルーム名"
          example: "楽しいゲーム部屋"
        hostId:
          type: string
          description: "ホストのプレイヤーID"
          example: "pl_1234567890"
        maxPlayers:
          type: integer
          description: "最大プレイヤー数"
          example: 4
        currentPlayers:
          type: integer
          description: "現在のプレイヤー数"
          example: 2
        initialHandSize:
          type: integer
          description: "初期手札枚数"
          example: 7
        turnTimeLimit:
          type: integer
          description: "ターン時間制限（秒）"
          example: 60
        isPublic:
          type: boolean
          description: "公開ルームかどうか"
          example: true
        status:
          type: string
          enum: ["waiting", "playing", "finished"]
          description: "ルームの状態"
          example: "waiting"
        players:
          type: array
          items:
            $ref: "#/components/schemas/RoomPlayerInfo"
          description: "ルーム内のプレイヤー一覧"
        createdAt:
          type: string
          format: date-time
          description: "作成日時"
          example: "2025-10-11T10:00:00Z"

    RoomListItem:
      type: object
      properties:
        roomId:
          type: string
          description: "ルームID"
          example: "rm_abc123"
        roomCode:
          type: string
          description: "6桁のルームコード"
          example: "ABC123"
        roomName:
          type: string
          nullable: true
          description: "ルーム名"
          example: "楽しいゲーム部屋"
        hostUsername:
          type: string
          description: "ホストのユーザー名"
          example: "hostplayer"
        currentPlayers:
          type: integer
          description: "現在のプレイヤー数"
          example: 2
        maxPlayers:
          type: integer
          description: "最大プレイヤー数"
          example: 4
        initialHandSize:
          type: integer
          description: "初期手札枚数"
          example: 7
        turnTimeLimit:
          type: integer
          description: "ターン時間制限（秒）"
          example: 60
        status:
          type: string
          enum: ["waiting", "playing", "finished"]
          description: "ルームの状態"
          example: "waiting"
        createdAt:
          type: string
          format: date-time
          description: "作成日時"
          example: "2025-10-11T10:00:00Z"

    RoomListResponse:
      type: object
      properties:
        rooms:
          type: array
          items:
            $ref: "#/components/schemas/RoomListItem"
          description: "ルーム一覧"
        pagination:
          $ref: "#/components/schemas/PaginationInfo"

    RoomCodeResponse:
      type: object
      properties:
        roomId:
          type: string
          description: "ルームID"
          example: "rm_abc123"
        roomCode:
          type: string
          description: "6桁のルームコード"
          example: "ABC123"
        roomName:
          type: string
          nullable: true
          description: "ルーム名"
          example: "楽しいゲーム部屋"
        currentPlayers:
          type: integer
          description: "現在のプレイヤー数"
          example: 2
        maxPlayers:
          type: integer
          description: "最大プレイヤー数"
          example: 4
        status:
          type: string
          enum: ["waiting", "playing", "finished"]
          description: "ルームの状態"
          example: "waiting"

    RoomJoinResponse:
      type: object
      properties:
        roomId:
          type: string
          description: "ルームID"
          example: "rm_abc123"
        playerId:
          type: string
          description: "参加したプレイヤーのID"
          example: "pl_1234567890"
        joinedAt:
          type: string
          format: date-time
          description: "参加日時"
          example: "2025-10-11T10:05:00Z"

    RoomLeaveResponse:
      type: object
      properties:
        roomId:
          type: string
          description: "ルームID"
          example: "rm_abc123"
        playerId:
          type: string
          description: "退出したプレイヤーのID"
          example: "pl_1234567890"
        leftAt:
          type: string
          format: date-time
          description: "退出日時"
          example: "2025-10-11T10:10:00Z"

    RoomReadyResponse:
      type: object
      properties:
        playerId:
          type: string
          description: "プレイヤーのID"
          example: "pl_1234567890"
        isReady:
          type: boolean
          description: "準備完了状態"
          example: true

    RoomStartResponse:
      type: object
      properties:
        roomId:
          type: string
          description: "ルームID"
          example: "rm_abc123"
        gameId:
          type: string
          description: "作成されたゲームID"
          example: "gm_xyz789"
        status:
          type: string
          enum: ["playing"]
          description: "ゲームの状態"
          example: "playing"
        startedAt:
          type: string
          format: date-time
          description: "ゲーム開始日時"
          example: "2025-10-11T10:15:00Z"

    PaginationInfo:
      type: object
      properties:
        page:
          type: integer
          description: "現在のページ番号"
          example: 1
        limit:
          type: integer
          description: "1ページあたりの件数"
          example: 20
        total:
          type: integer
          description: "総件数"
          example: 45
        totalPages:
          type: integer
          description: "総ページ数"
          example: 3

paths:
  /:
    get:
      summary: "Hello World"
      description: "シンプルなHello Worldエンドポイント"
      responses:
        "200":
          description: "成功レスポンス"
          content:
            text/plain:
              schema:
                type: "string"
                example: "Hello World!"

  /health:
    get:
      summary: "Health Check"
      description: "サーバーの稼働状態を確認するヘルスチェックエンドポイント"
      responses:
        "200":
          description: "サーバーが正常に稼働中"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    type: "string"
                    example: "OK"
                  timestamp:
                    type: "string"
                    format: "date-time"
                    example: "2025-10-16T14:59:55.459Z"

  /api/v1/hello:
    get:
      summary: "API v1 Hello"
      description: "API v1のHelloエンドポイント"
      responses:
        "200":
          description: "成功レスポンス"
          content:
            text/plain:
              schema:
                type: "string"
                example: "Hello from API v1!"

  # プレイヤー管理API
  /api/players:
    post:
      summary: "プレイヤー登録"
      description: "新規プレイヤーを登録します"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlayerCreateRequest"
      responses:
        "201":
          description: "プレイヤーが正常に作成されました"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/PlayerResponse"
        "400":
          description: "バリデーションエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
        "409":
          description: "ユーザー名が既に存在します"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"

  /api/players/{playerId}:
    parameters:
      - name: playerId
        in: path
        required: true
        schema:
          type: string
        description: "プレイヤーID"
        example: "pl_1234567890"

    get:
      summary: "プレイヤー情報取得"
      description: "指定されたプレイヤーの情報を取得します"
      responses:
        "200":
          description: "プレイヤー情報"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/PlayerResponse"
        "404":
          description: "プレイヤーが見つかりません"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"

    put:
      summary: "プレイヤー情報更新"
      description: "指定されたプレイヤーの情報を更新します"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlayerUpdateRequest"
      responses:
        "200":
          description: "プレイヤー情報が正常に更新されました"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/PlayerResponse"
        "400":
          description: "バリデーションエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
        "404":
          description: "プレイヤーが見つかりません"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
        "409":
          description: "ユーザー名が既に存在します"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"

  /api/players/{playerId}/stats:
    parameters:
      - name: playerId
        in: path
        required: true
        schema:
          type: string
        description: "プレイヤーID"
        example: "pl_1234567890"

    get:
      summary: "プレイヤー統計取得"
      description: "指定されたプレイヤーの詳細統計を取得します"
      responses:
        "200":
          description: "プレイヤー統計情報"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/PlayerStatsResponse"
        "404":
          description: "プレイヤーが見つかりません"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"

  # ポーリングAPI（Phase 11）
  /api/rooms/code/{roomCode}/state:
    parameters:
      - name: roomCode
        in: path
        required: true
        schema:
          type: string
          minLength: 6
          maxLength: 6
          pattern: "^[A-Z0-9]+$"
        description: "6桁のルームコード"
        example: "ABC123"

    get:
      summary: "ルーム状態取得（ポーリング用）"
      description: "ルームの現在の状態を取得します。If-Modified-Sinceヘッダーを使用して効率的なポーリングを実現します。"
      parameters:
        - name: If-Modified-Since
          in: header
          required: false
          schema:
            type: string
            format: date-time
          description: "前回取得時のLast-Modified値"
      responses:
        "200":
          description: "ルーム状態情報"
          headers:
            Last-Modified:
              description: "ルームの最終更新時刻"
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/RoomStateResponse"
        "304":
          description: "変更なし（Not Modified）"
        "404":
          description: "ルームが見つかりません"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"

  # Phase 14 ゲームAPI
  /api/v1/games:
    post:
      summary: "ゲーム作成"
      description: "新しいゲームを作成し、初期状態を設定します。デッキをシャッフルし、各プレイヤーに7枚ずつ配り、場札を2枚設定します。"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGameRequest"
      responses:
        "201":
          description: "ゲーム作成成功"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/CreateGameResponse"
        "400":
          description: "バリデーションエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"

  /api/v1/games/{gameId}/state:
    parameters:
      - name: gameId
        in: path
        required: true
        schema:
          type: string
        description: "ゲームID"
        example: "game_1234567890"
      - name: playerId
        in: query
        required: false
        schema:
          type: string
        description: "プレイヤーID（指定すると自分の手札が表示される）"
        example: "pl_test_001"

    get:
      summary: "ゲーム状態取得"
      description: "ゲームの現在の状態を取得します。playerIdを指定すると、そのプレイヤーの手札とプレイ可能カードが含まれます。"
      responses:
        "200":
          description: "ゲーム状態情報"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/GameStateResponse"
        "400":
          description: "バリデーションエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
        "404":
          description: "ゲームが見つかりません"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"

  /api/v1/games/{gameId}/actions/play:
    parameters:
      - name: gameId
        in: path
        required: true
        schema:
          type: string
        description: "ゲームID"
        example: "game_1234567890"

    post:
      summary: "カードプレイ"
      description: "カードを場に出します。同じスートまたはランク±1のカードのみプレイ可能です。"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlayCardRequest"
      responses:
        "200":
          description: "カードプレイ成功"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/GameActionResponse"
        "400":
          description: "不正なカードプレイ"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      success:
                        type: boolean
                        example: false
                      data:
                        $ref: "#/components/schemas/GameActionResponse"

  /api/v1/games/{gameId}/actions/draw:
    parameters:
      - name: gameId
        in: path
        required: true
        schema:
          type: string
        description: "ゲームID"
        example: "game_1234567890"

    post:
      summary: "カードドロー"
      description: "山札からカードを1枚引きます。プレイ可能なカードがない場合のみ実行できます。"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DrawCardRequest"
      responses:
        "200":
          description: "カードドロー成功"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/GameActionResponse"
        "400":
          description: "カードを引けません"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      success:
                        type: boolean
                        example: false
                      data:
                        $ref: "#/components/schemas/GameActionResponse"

  /api/v1/games/{gameId}/actions/skip:
    parameters:
      - name: gameId
        in: path
        required: true
        schema:
          type: string
        description: "ゲームID"
        example: "game_1234567890"

    post:
      summary: "ターンスキップ"
      description: "ターンをスキップします。山札が空でプレイ可能なカードがない場合のみ実行できます。"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SkipTurnRequest"
      responses:
        "200":
          description: "ターンスキップ成功"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/GameActionResponse"
        "400":
          description: "ターンをスキップできません"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      success:
                        type: boolean
                        example: false
                      data:
                        $ref: "#/components/schemas/GameActionResponse"

  # チャットAPI
  /api/rooms/{roomId}/chat:
    parameters:
      - name: roomId
        in: path
        required: true
        schema:
          type: string
        description: "ルームID"
        example: "rm_abc123"

    post:
      summary: "チャットメッセージ送信"
      description: "ルーム内にチャットメッセージを送信します。"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChatMessageRequest"
      responses:
        "201":
          description: "メッセージ送信成功"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/ChatMessageResponse"
        "400":
          description: "バリデーションエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
        "404":
          description: "ルームまたはプレイヤーが見つかりません"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"

    get:
      summary: "チャットメッセージ履歴取得"
      description: "ルームのチャットメッセージ履歴を取得します。ページネーションに対応しています。"
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          description: "取得件数（デフォルト: 20、最大: 100）"
        - name: before
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: "この日時より前のメッセージを取得（ISO 8601形式）"
          example: "2025-10-11T12:00:00Z"
      responses:
        "200":
          description: "チャットメッセージ履歴"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/ChatMessagesResponse"
        "400":
          description: "バリデーションエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
        "404":
          description: "ルームが見つかりません"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"

  # ルーム管理API
  /api/rooms:

    post:
      summary: "ルーム作成"
      description: "新しいゲームルームを作成します"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoomCreateRequest"
      responses:
        "201":
          description: "ルームが正常に作成されました"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/RoomResponse"
        "400":
          description: "バリデーションエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"

    get:
      summary: "ルーム一覧取得"
      description: "公開ルームの一覧を取得します"
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: ["waiting", "playing", "finished"]
          description: "ルームの状態でフィルタリング"
        - name: maxPlayers
          in: query
          required: false
          schema:
            type: integer
            minimum: 2
            maximum: 4
          description: "最大プレイヤー数でフィルタリング"
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
          description: "ページ番号"
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: "1ページあたりの件数"
      responses:
        "200":
          description: "ルーム一覧"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/RoomListResponse"

  /api/rooms/{roomId}:
    parameters:
      - name: roomId
        in: path
        required: true
        schema:
          type: string
        description: "ルームID"
        example: "rm_abc123"

    get:
      summary: "ルーム詳細取得"
      description: "指定されたルームの詳細情報を取得します"
      responses:
        "200":
          description: "ルーム詳細情報"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/RoomResponse"
        "404":
          description: "ルームが見つかりません"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"

  /api/rooms/{roomId}/join:
    parameters:
      - name: roomId
        in: path
        required: true
        schema:
          type: string
        description: "ルームID"
        example: "rm_abc123"

    post:
      summary: "ルーム参加"
      description: "指定されたルームに参加します"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoomJoinRequest"
      responses:
        "200":
          description: "ルームに参加しました"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/RoomJoinResponse"
        "400":
          description: "バリデーションエラーまたはルームが満員"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
        "404":
          description: "ルームまたはプレイヤーが見つかりません"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"

  /api/rooms/{roomId}/leave:
    parameters:
      - name: roomId
        in: path
        required: true
        schema:
          type: string
        description: "ルームID"
        example: "rm_abc123"

    post:
      summary: "ルーム退出"
      description: "指定されたルームから退出します"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoomLeaveRequest"
      responses:
        "200":
          description: "ルームから退出しました"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/RoomLeaveResponse"
        "400":
          description: "バリデーションエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
        "404":
          description: "ルームが見つかりません"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"

  /api/rooms/{roomId}/ready:
    parameters:
      - name: roomId
        in: path
        required: true
        schema:
          type: string
        description: "ルームID"
        example: "rm_abc123"

    post:
      summary: "準備完了設定"
      description: "プレイヤーの準備完了状態を設定します"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoomReadyRequest"
      responses:
        "200":
          description: "準備状態が更新されました"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/RoomReadyResponse"
        "400":
          description: "バリデーションエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
        "404":
          description: "ルームが見つかりません"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"

  /api/rooms/{roomId}/start:
    parameters:
      - name: roomId
        in: path
        required: true
        schema:
          type: string
        description: "ルームID"
        example: "rm_abc123"

    post:
      summary: "ゲーム開始"
      description: "ルーム内のゲームを開始します（ホストのみ）"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoomStartRequest"
      responses:
        "200":
          description: "ゲームを開始しました"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/RoomStartResponse"
        "400":
          description: "バリデーションエラーまたは開始条件を満たしていない"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
        "404":
          description: "ルームが見つかりません"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"

  /api/rooms/code/{roomCode}:
    parameters:
      - name: roomCode
        in: path
        required: true
        schema:
          type: string
          minLength: 6
          maxLength: 6
          pattern: "^[A-Z0-9]+$"
        description: "6桁のルームコード"
        example: "ABC123"

    get:
      summary: "ルームコードでルーム取得"
      description: "ルームコードを使用してルーム情報を取得します"
      responses:
        "200":
          description: "ルーム情報"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/RoomCodeResponse"
        "404":
          description: "ルームコードが無効です"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"