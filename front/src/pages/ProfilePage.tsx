import React, { useState } from 'react';
import { Container, Header, Footer, Card, Button, Input } from '../components';

interface ProfilePageProps {
  onNavigate?: (page: string) => void;
  player?: {
    name: string;
    avatar?: string;
    wins?: number;
    totalGames?: number;
  } | null;
  onPlayerUpdate?: (player: any) => void;
}

const ProfilePage: React.FC<ProfilePageProps> = ({ 
  onNavigate, 
  player = { name: 'Guest', wins: 0, totalGames: 0 },
  onPlayerUpdate 
}) => {
  const [isEditing, setIsEditing] = useState(false);
  const [editForm, setEditForm] = useState({
    name: player?.name || '',
    avatar: player?.avatar || ''
  });

  const winRate = ((player?.totalGames || 0) > 0) ? (((player?.wins || 0) / (player?.totalGames || 1)) * 100).toFixed(1) : '0.0';

  const handleSave = () => {
    if (!player) return;
    
    const updatedPlayer = {
      ...player,
      name: editForm.name,
      avatar: editForm.avatar
    };
    
    if (onPlayerUpdate) {
      onPlayerUpdate(updatedPlayer);
    }
    
    setIsEditing(false);
    console.log('Profile updated:', updatedPlayer);
  };

  const handleCancel = () => {
    setEditForm({
      name: player?.name || '',
      avatar: player?.avatar || ''
    });
    setIsEditing(false);
  };

  const stats = [
    { label: 'Á∑è„Ç≤„Éº„É†Êï∞', value: player?.totalGames || 0 },
    { label: 'ÂãùÂà©Êï∞', value: player?.wins || 0 },
    { label: 'ÂãùÁéá', value: `${winRate}%` },
    { label: 'ÈÄ£ÂãùË®òÈå≤', value: 3 }, // TODO: ÂÆüË£Ö‰∫àÂÆö
  ];

  const achievements = [
    { name: 'ÂàùÂãùÂà©', description: 'Âàù„ÇÅ„Å¶ÂãùÂà©„ÇíÂèé„ÇÅ„Çã', unlocked: (player?.wins || 0) > 0 },
    { name: '„Éô„ÉÜ„É©„É≥', description: '10Ë©¶Âêà„Éó„É¨„Ç§„Åô„Çã', unlocked: (player?.totalGames || 0) >= 10 },
    { name: 'ÂãùÂà©ËÄÖ', description: 'ÂãùÁéá50%‰ª•‰∏ä„ÇíÈÅîÊàê', unlocked: parseFloat(winRate) >= 50 },
    { name: '„Çπ„Éî„Éº„Éâ„Éû„Çπ„Çø„Éº', description: 'ÈÄ£Á∂ö5Âãù„ÇíÈÅîÊàê', unlocked: false }, // TODO: ÂÆüË£Ö‰∫àÂÆö
  ];

  return (
    <div className="min-h-screen" style={{ background: 'var(--color-background-gradient)' }}>
      <Container size="lg" variant="gradient">
        <Header 
          title="„Éó„É≠„Éï„Ç£„Éº„É´"
          player={player || undefined}
          showNavigation={true}
          onNavigate={onNavigate}
        />
        
        <main>
          <div className="grid gap-6">
            {/* „Éó„É≠„Éï„Ç£„Éº„É´ÊÉÖÂ†± */}
            <Card variant="elevated">
              <div className="p-6">
                <div className="flex justify-between items-start mb-6">
                  <h2 className="text-2xl font-bold">„Éó„É¨„Ç§„É§„ÉºÊÉÖÂ†±</h2>
                  {!isEditing ? (
                    <Button 
                      variant="secondary" 
                      size="sm"
                      onClick={() => setIsEditing(true)}
                    >
                      Á∑®ÈõÜ
                    </Button>
                  ) : (
                    <div className="flex gap-2">
                      <Button 
                        variant="primary" 
                        size="sm"
                        onClick={handleSave}
                      >
                        ‰øùÂ≠ò
                      </Button>
                      <Button 
                        variant="secondary" 
                        size="sm"
                        onClick={handleCancel}
                      >
                        „Ç≠„É£„É≥„Çª„É´
                      </Button>
                    </div>
                  )}
                </div>
                
                <div className="flex items-center gap-6">
                  <div className="w-20 h-20 rounded-full bg-primary-100 flex items-center justify-center text-2xl font-bold text-primary-600">
                    {player?.avatar || player?.name?.charAt(0).toUpperCase() || 'G'}
                  </div>
                  
                  <div className="flex-1">
                    {!isEditing ? (
                      <div>
                        <h3 className="text-xl font-semibold mb-2">{player?.name || 'Guest'}</h3>
                        <p className="text-secondary">
                          „Çπ„Éî„Éº„Éâ„Éû„ÉÉ„ÉÅ„Éó„É¨„Ç§„É§„Éº
                        </p>
                      </div>
                    ) : (
                      <div className="space-y-4">
                        <div>
                          <label className="block text-sm font-medium mb-2">„Éó„É¨„Ç§„É§„ÉºÂêç</label>
                          <Input
                            value={editForm.name}
                            onChange={(e) => setEditForm(prev => ({ ...prev, name: e.target.value }))}
                            placeholder="„Éó„É¨„Ç§„É§„ÉºÂêç„ÇíÂÖ•Âäõ"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium mb-2">„Ç¢„Éê„Çø„ÉºÔºà1ÊñáÂ≠óÔºâ</label>
                          <Input
                            value={editForm.avatar}
                            onChange={(e) => setEditForm(prev => ({ ...prev, avatar: e.target.value.slice(0, 1) }))}
                            placeholder="„Ç¢„Éê„Çø„ÉºÊñáÂ≠ó„ÇíÂÖ•Âäõ"
                            maxLength={1}
                          />
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </Card>

            {/* Áµ±Ë®àÊÉÖÂ†± */}
            <Card variant="elevated">
              <div className="p-6">
                <h3 className="text-xl font-bold mb-4">„Éó„É¨„Ç§Áµ±Ë®à</h3>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  {stats.map((stat, index) => (
                    <div key={index} className="text-center p-4 bg-background-secondary rounded-lg">
                      <div className="text-2xl font-bold text-primary-600 mb-1">
                        {stat.value}
                      </div>
                      <div className="text-sm text-secondary">
                        {stat.label}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </Card>

            {/* ÂÆüÁ∏æ */}
            <Card variant="elevated">
              <div className="p-6">
                <h3 className="text-xl font-bold mb-4">ÂÆüÁ∏æ</h3>
                <div className="grid gap-3">
                  {achievements.map((achievement, index) => (
                    <div 
                      key={index} 
                      className={`flex items-center gap-4 p-3 rounded-lg ${
                        achievement.unlocked 
                          ? 'bg-green-50 border border-green-200' 
                          : 'bg-gray-50 border border-gray-200 opacity-60'
                      }`}
                    >
                      <div className={`w-10 h-10 rounded-full flex items-center justify-center ${
                        achievement.unlocked 
                          ? 'bg-green-100 text-green-600' 
                          : 'bg-gray-100 text-gray-400'
                      }`}>
                        {achievement.unlocked ? 'üèÜ' : 'üîí'}
                      </div>
                      <div>
                        <h4 className="font-semibold">{achievement.name}</h4>
                        <p className="text-sm text-secondary">{achievement.description}</p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </Card>

            {/* „Ç¢„ÇØ„Ç∑„Éß„É≥ */}
            <div className="flex gap-4 justify-center flex-wrap">
              <Button 
                variant="primary" 
                size="lg"
                onClick={() => onNavigate?.('home')}
              >
                „Éõ„Éº„É†„Å´Êàª„Çã
              </Button>
              <Button 
                variant="secondary" 
                size="lg"
                onClick={() => onNavigate?.('rooms')}
              >
                „Ç≤„Éº„É†„ÇíÈñãÂßã
              </Button>
              
              {/* „Éá„Éê„ÉÉ„Ç∞Áî®„É™„Çª„ÉÉ„ÉàÊ©üËÉΩ */}
              <Button 
                variant="error" 
                size="sm"
                onClick={() => {
                  if (confirm('„Ç¢„Ç´„Ç¶„É≥„Éà„Éá„Éº„Çø„Çí„É™„Çª„ÉÉ„Éà„Åó„Åæ„Åô„ÅãÔºü„Åì„ÅÆÊìç‰Ωú„ÅØÂÖÉ„Å´Êàª„Åõ„Åæ„Åõ„Çì„ÄÇ')) {
                    localStorage.removeItem('speedmatch-player');
                    window.location.reload();
                  }
                }}
              >
                „Éá„Éº„Çø„É™„Çª„ÉÉ„ÉàÔºà„Éá„Éê„ÉÉ„Ç∞Áî®Ôºâ
              </Button>
            </div>
          </div>
        </main>

        <Footer />
      </Container>
    </div>
  );
};

export default ProfilePage;